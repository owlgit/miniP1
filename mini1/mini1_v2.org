* Mini Project 1
** Plot electron cloud as "fog"

#+begin_src python
from ase.structure import molecule
from jasp import *

###### Inputs required from user from HERE ####
dirCal = 'h2o'

#1 to plot linkage between atoms (for simple molecules), 0 otherwise
plotLinks = 0
#1 to plot cell boundary
plotCell= 1

#########    To HERE   ########################

##### Use jasp ##########
with jasp(dirCal) as calc:
        calc.calculate()
        cObj = calc.get_atoms()
        xCD, yCD , zCD, cd = calc.get_charge_density()

##############################################
########## Start  Plotting ###################
##############################################

from enthought.mayavi import mlab
from ase.data.colors import cpk_colors
import getPosLink as gPL
import os

mlab.figure(1, bgcolor=(1, 1, 1))
mlab.clf()

## assume path is current directory + folder name where calculations are stored
path = os.getcwd() + '/' + dirCal + '/'

##############################
# Plot position of the atoms #
##############################

# read file to get position
dataCoord, numOfElements, ttlAtoms, dataElements = gPL.getPos(path + 'CHG')

a = 0
i = 0
for a in range(int(numOfElements)):
        b = 0
        for b in range(int(dataElements[a])):
            mlab.points3d(dataCoord[i,0], dataCoord[i,1], dataCoord[i,2],
                        scale_factor=0.5,
                        resolution=20,
                        color=tuple(cpk_colors[a*3]),
                        scale_mode='none')
            i += 1


###########################
# Plot links between atoms #
###########################

if(plotLinks == 1):
       # read file to get linkage or connectivity between atoms
       n1,n2 = gPL.getLinks(path + 'OUTCAR',ttlAtoms)
       for j in range(len(n1)):
          pts = [n1[j],n2[j]]
          ptsX = dataCoord[pts,0]
          ptsY = dataCoord[pts,1]
          ptsZ = dataCoord[pts,2]
          mlab.plot3d(ptsX, ptsY, ptsZ,
                      tube_radius=0.05,tube_sides=8,colormap='Reds')


##########################
# draw the cell boundary #
##########################

if(plotCell == 1):
        a1, a2, a3 = cObj.get_cell()
        origin = [0, 0, 0]
        cell_matrix = [[origin, a1],
               [origin, a2],
               [origin, a3],
               [a1, a1 + a2],
               [a1, a1 + a3],
               [a2, a2 + a1],
               [a2, a2 + a3],
               [a3, a1 + a3],
               [a3, a2 + a3],
               [a1 + a2, a1 + a2 + a3],
               [a2 + a3, a1 + a2 + a3],
               [a1 + a3, a1 + a3 + a2]]

        for p1, p2 in cell_matrix:
            mlab.plot3d([p1[0], p2[0]], # x-positions
                         [p1[1], p2[1]], # y-positions
                         [p1[2], p2[2]], # z-positions
                         tube_radius=0.01)

####################################
# Plot the charge density as "fog" #
####################################

dataCD = cd
x = xCD
y = yCD
z = zCD


densityCD = mlab.pipeline.scalar_field(x,y,z,dataCD)
minCD  = dataCD.min()
maxCD  = dataCD.max()


vol = mlab.pipeline.volume(densityCD,
                           vmin=minCD+0.01*(maxCD -minCD),
                           vmax=minCD+0.1*(maxCD-minCD))

#v = mlab.view()
#print v
#mlab.view(azimuth=45.0, elevation = 55, distance = 12)
mlab.savefig('images/' + dirCal +'_iso.png')

#mlab.view(azimuth=180, elevation = 0, distance = 18)
#mlab.savefig('images/' + dirCal +'_top.png')

#mlab.view(azimuth=0, elevation = 90, distance = 28)
#mlab.savefig('images/' + dirCal +'_side.png')

#mlab.view(azimuth=90, elevation = 90, distance = 28)
#mlab.savefig('images/' + dirCal +'_front.png')

mlab.show()

#+end_src

#+RESULTS:
